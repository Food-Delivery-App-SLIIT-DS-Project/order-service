// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "order";

export interface User {
  fullName: string;
  email: string;
  phoneNumber: string;
}

export interface CreateOrderRequest {
  user: User | undefined;
  orderId: string;
  deliveryEstimate: string;
}

export interface OrderResponse {
  orderId: string;
  status: string;
  estimatedDelivery: string;
}

export interface Empty {
}

export interface OrderList {
  orders: Order[];
}

export interface FineOneOrderDto {
  id: string;
}

export interface CreateOrderDto {
  id: string;
  userId: string;
  productId: string;
  quantity: number;
}

export interface UpdateOrderDto {
  id: string;
  userId: string;
  productId: string;
  quantity: number;
}

export interface Order {
  id: string;
  userId: string;
  productId: string;
  quantity: number;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  createOrder(request: CreateOrderDto): Observable<Order>;

  findAllOrders(request: Empty): Observable<OrderList>;

  findOrderById(request: FineOneOrderDto): Observable<Order>;

  updateOrder(request: UpdateOrderDto): Observable<Order>;

  deleteOrder(request: FineOneOrderDto): Observable<Order>;

  placeOrder(request: CreateOrderRequest): Observable<OrderResponse>;
}

export interface OrderServiceController {
  createOrder(request: CreateOrderDto): Promise<Order> | Observable<Order> | Order;

  findAllOrders(request: Empty): Promise<OrderList> | Observable<OrderList> | OrderList;

  findOrderById(request: FineOneOrderDto): Promise<Order> | Observable<Order> | Order;

  updateOrder(request: UpdateOrderDto): Promise<Order> | Observable<Order> | Order;

  deleteOrder(request: FineOneOrderDto): Promise<Order> | Observable<Order> | Order;

  placeOrder(request: CreateOrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createOrder",
      "findAllOrders",
      "findOrderById",
      "updateOrder",
      "deleteOrder",
      "placeOrder",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
